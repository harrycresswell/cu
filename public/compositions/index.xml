<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Compositions on cu.css</title>
    <link>http://example.org/compositions/</link>
    <description>Recent content in Compositions on cu.css</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Tue, 11 Jul 2023 16:42:51 +0100</lastBuildDate><atom:link href="http://example.org/compositions/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Grid</title>
      <link>http://example.org/compositions/grid/</link>
      <pubDate>Tue, 11 Jul 2023 16:42:51 +0100</pubDate>
      
      <guid>http://example.org/compositions/grid/</guid>
      <description>Grid comes in three flavours: Two-column, Three-column and Masonry layout.
Two-column layout The two-column layout positions grid items side-by-side when space permits, so that items proportionately share the available space.
Use the layout by adding data-layout=&amp;quot;50-50&amp;quot; to any element with the .grid class applied.
Item 1 Item 2 Item 3 Item 4 Two column when space permits /* Two column when space permits */ .grid[data-layout=&amp;#39;50-50&amp;#39;] { --grid-placement: auto-fit; --grid-min-item-size: clamp(16rem, 50vw, 26rem); } Three-column layout The three-column layout positions grid items in three columns when space permits, so that items proportionately share the available space.</description>
    </item>
    
    <item>
      <title>Cluster</title>
      <link>http://example.org/compositions/cluster/</link>
      <pubDate>Tue, 11 Jul 2023 16:42:27 +0100</pubDate>
      
      <guid>http://example.org/compositions/cluster/</guid>
      <description>Cluster creates flex items which cluster inline, until space no longer permits. At this point, items begin to wrap and display in block. The width of an item is determined by its content.
This layout is handy for grouping elements like navigation links, breadcrumbs, tags, etc. Use it by adding the .cluster class to an element with nested children.
Item 1 Item 2 Item 3 Item 4 Item 5 Item 6 Cluster will cluster items inline while space permits .</description>
    </item>
    
    <item>
      <title>Repel</title>
      <link>http://example.org/compositions/repel/</link>
      <pubDate>Tue, 11 Jul 2023 16:42:27 +0100</pubDate>
      
      <guid>http://example.org/compositions/repel/</guid>
      <description>Repel adds as much inline space as possibe between two grid items, so that 100% of the inline space has been filled. When space doesnâ€™t permit, items will wrap, appearing as block elements.
Add the .repel class to site headers, site footers or anywhere you want to push two items away from each other.
Use data-nowrap to prevent items from wrapping when space no longer permits.
Item 1 Item 2 Repel quite literally repels two items from one another .</description>
    </item>
    
  </channel>
</rss>
